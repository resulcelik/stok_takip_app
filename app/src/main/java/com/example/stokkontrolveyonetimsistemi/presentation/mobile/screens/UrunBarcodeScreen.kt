package com.example.stokkontrolveyonetimsistemi.presentation.mobile.screens

import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.foundation.BorderStroke
import android.widget.Toast
import com.example.stokkontrolveyonetimsistemi.presentation.viewmodel.MobileRegistrationViewModel

// ÃœrÃ¼n NumarasÄ± GÃ¶sterimi (Barkod okutulduÄŸunda)@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun UrunBarcodeScreen(
    viewModel: MobileRegistrationViewModel,
    onScanBarcode: (callback: (String) -> Unit) -> Unit,
    onNavigateToUrunDetail: () -> Unit
) {
    // State'leri observe et
    val rafSeriNo by viewModel.rafSeriNo.collectAsState()
    val urunBilgileri by viewModel.urunBilgileri.collectAsState()
    val isUrunBarcodeScanned by viewModel.isUrunBarcodeScanned.collectAsState()
    val isLoading by viewModel.isLoading.collectAsState()
    val errorMessage by viewModel.errorMessage.observeAsState()
    val successMessage by viewModel.successMessage.observeAsState()
    val context = LocalContext.current

    // Text field iÃ§in state
    var barcodeInput by remember { mutableStateOf("") }
    val focusRequester = remember { FocusRequester() }

    // Success message handling
    LaunchedEffect(successMessage) {
        successMessage?.let { message ->
            if (message.contains("ÃœrÃ¼n barkodu okundu")) {
                Toast.makeText(context, message, Toast.LENGTH_SHORT).show()
                viewModel.clearSuccess()
            }
        }
    }

    // **YENÄ°: isUrunBarcodeScanned state deÄŸiÅŸimini takip et**
    LaunchedEffect(isUrunBarcodeScanned) {
        Log.d("UrunBarcodeScreen", "isUrunBarcodeScanned changed: $isUrunBarcodeScanned")
    }

    // Otomatik odaklan
    LaunchedEffect(Unit) {
        focusRequester.requestFocus()
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // RAF Bilgisi (Ãœstte gÃ¶ster)
        if (rafSeriNo.isNotEmpty()) {
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(40.dp),
                shape = RoundedCornerShape(8.dp),
                colors = CardDefaults.cardColors(
                    containerColor = Color(0xFFE8F5E9)
                )
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(horizontal = 12.dp),
                    verticalAlignment = Alignment.CenterVertically,
                    horizontalArrangement = Arrangement.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.Inventory,
                        contentDescription = null,
                        tint = Color(0xFF4CAF50),
                        modifier = Modifier.size(18.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "RAF: $rafSeriNo",
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF2E7D32)
                    )
                }
            }

            Spacer(modifier = Modifier.height(16.dp))
        }

        // BaÅŸlÄ±k
        Text(
            text = "ðŸ“¦ ÃœRÃœN BARKODU OKUTUN",
            fontSize = 24.sp,
            fontWeight = FontWeight.Bold,
            textAlign = TextAlign.Center,
            modifier = Modifier.padding(vertical = 16.dp)
        )

        // AÃ§Ä±klama
        Text(
            text = "Fiziksel okuyucu ile Ã¼rÃ¼n barkodunu okutun",
            fontSize = 16.sp,
            color = Color.Gray,
            textAlign = TextAlign.Center,
            modifier = Modifier.padding(bottom = 24.dp)
        )

        // **DÃœZELTÄ°LDÄ°: Barkod Input Field**
        OutlinedTextField(
            value = barcodeInput,
            onValueChange = { newValue ->
                // Enter tuÅŸu ile biten girdileri iÅŸle
                if (newValue.contains("\n") || newValue.contains("\r")) {
                    val cleanCode = newValue.replace("\n", "").replace("\r", "").trim()
                    if (cleanCode.isNotEmpty()) {
                        if (isValidUrunFormat(cleanCode)) {
                            // **Ã–NEMLÄ°: ÃœrÃ¼n barkodunu process et ve input'u temizle**
                            viewModel.processUrunBarcode(cleanCode)
                            barcodeInput = "" // Input'u temizle

                            // **YENÄ°: Barcode process edildiÄŸinde log ekle**
                            Log.d("UrunBarcodeScreen", "Barcode processed: $cleanCode")
                        } else {
                            Toast.makeText(context, "GeÃ§ersiz Ã¼rÃ¼n formatÄ±! U ile baÅŸlamalÄ± ve 12 karakter olmalÄ±.", Toast.LENGTH_LONG).show()
                            barcodeInput = ""
                        }
                    }
                } else {
                    barcodeInput = newValue
                }
            },
            label = { Text("ÃœrÃ¼n Barkodu (U00000000XXX)") },
            placeholder = { Text("Fiziksel okuyucu ile okutun...") },
            modifier = Modifier
                .fillMaxWidth()
                .focusRequester(focusRequester),
            keyboardOptions = KeyboardOptions(
                keyboardType = KeyboardType.Text,
                imeAction = ImeAction.Done
            ),
            leadingIcon = {
                Icon(
                    imageVector = Icons.Default.Scanner,
                    contentDescription = "Barkod"
                )
            },
            singleLine = true,
            enabled = !isLoading,

        )

        Spacer(modifier = Modifier.height(16.dp))

        // **YENÄ°: Manuel Test Butonu (GeliÅŸtirme iÃ§in)**
        if (!isUrunBarcodeScanned && urunBilgileri.tasnifNo.isEmpty()) {
            OutlinedButton(
                onClick = {
                    // Test iÃ§in manuel barcode ekleme
                    viewModel.processUrunBarcode(barcodeInput)
                    Toast.makeText(context, "Test barkodu eklendi: $barcodeInput", Toast.LENGTH_SHORT).show()
                },
                modifier = Modifier.fillMaxWidth(),
                enabled = !isLoading,
                border = BorderStroke(1.dp, Color.Green)
            ) {
                Icon(
                    imageVector = Icons.Default.BugReport,
                    contentDescription = null,
                    modifier = Modifier.size(18.dp),
                    tint = Color.Green
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text("TEST: Manuel Barcode Ekle", color = Color.Green)
            }

            Spacer(modifier = Modifier.height(8.dp))
        }

        // Odakla Butonu
        OutlinedButton(
            onClick = {
                focusRequester.requestFocus()
                barcodeInput = ""
            },
            modifier = Modifier.fillMaxWidth(),
            enabled = !isLoading
        ) {
            Icon(
                imageVector = Icons.Default.CenterFocusStrong,
                contentDescription = null,
                modifier = Modifier.size(18.dp)
            )
            Spacer(modifier = Modifier.width(8.dp))
            Text("OdaÄŸÄ± Yenile")
        }

        // **DÃœZELTÄ°LDÄ°: ÃœrÃ¼n NumarasÄ± GÃ¶sterimi - KoÅŸul basitleÅŸtirildi**
        if (urunBilgileri.tasnifNo.isNotEmpty()) {
            Spacer(modifier = Modifier.height(32.dp))

            Card(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(12.dp),
                border = BorderStroke(2.dp, Color(0xFF00897B))
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(20.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Row(
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            imageVector = if (isUrunBarcodeScanned) Icons.Default.CheckCircle else Icons.Default.Warning,
                            contentDescription = null,
                            tint = if (isUrunBarcodeScanned) Color(0xFF00897B) else Color.Green,
                            modifier = Modifier.size(24.dp)
                        )

                        Spacer(modifier = Modifier.width(8.dp))

                        Text(
                            text = if (isUrunBarcodeScanned) "ÃœrÃ¼n NumarasÄ± Okundu" else "ÃœrÃ¼n NumarasÄ± (DoÄŸrulanmadÄ±)",
                            fontSize = 16.sp,
                            fontWeight = FontWeight.Bold,
                            color = if (isUrunBarcodeScanned) Color(0xFF00897B) else Color.Green
                        )
                    }

                    Spacer(modifier = Modifier.height(12.dp))

                    Text(
                        text = "Okunan ÃœrÃ¼n NumarasÄ±:",
                        fontSize = 14.sp,
                        color = Color.Gray
                    )

                    Spacer(modifier = Modifier.height(8.dp))

                    // ÃœrÃ¼n NumarasÄ±
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .background(
                                color = Color(0xFFF5F5F5),
                                shape = RoundedCornerShape(8.dp)
                            )
                            .border(
                                width = 1.dp,
                                color = Color.LightGray,
                                shape = RoundedCornerShape(8.dp)
                            )
                            .padding(16.dp),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = urunBilgileri.tasnifNo,
                            fontSize = 24.sp,
                            fontWeight = FontWeight.Bold,
                            fontFamily = FontFamily.Monospace,
                            color = Color.Black
                        )
                    }
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Yeniden Okut Butonu
            OutlinedButton(
                onClick = {
                    // ÃœrÃ¼n barkodunu temizle ve odaklan
                    viewModel.clearUrunBarcode()
                    barcodeInput = ""
                    focusRequester.requestFocus()
                    Toast.makeText(context, "Yeni Ã¼rÃ¼n okutabilirsiniz", Toast.LENGTH_SHORT).show()
                },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(48.dp),
                enabled = !isLoading,
                border = BorderStroke(1.dp, Color(0xFF00897B))
            ) {
                Icon(
                    imageVector = Icons.Default.Refresh,
                    contentDescription = null,
                    modifier = Modifier.size(20.dp),
                    tint = Color(0xFF00897B)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(
                    text = "YENÄ°DEN OKUT",
                    color = Color(0xFF00897B)
                )
            }
        }

        Spacer(modifier = Modifier.weight(1f))

        // **GELÄ°ÅžTÄ°RÄ°LDÄ°: Debug bilgisi gÃ¶ster - Daha kompakt**
        if (urunBilgileri.tasnifNo.isNotEmpty()) {
            Card(
                modifier = Modifier.fillMaxWidth(),
                colors = CardDefaults.cardColors(containerColor = Color.LightGray)
            ) {
                Column(modifier = Modifier.padding(8.dp)) {
                    Text("DEBUG:", fontSize = 10.sp, fontWeight = FontWeight.Bold)
                    Text("tasnifNo: '${urunBilgileri.tasnifNo}'", fontSize = 10.sp)
                    Text("isUrunBarcodeScanned: $isUrunBarcodeScanned", fontSize = 10.sp)
                    Text("Button enabled: ${urunBilgileri.tasnifNo.isNotEmpty() && isUrunBarcodeScanned && !isLoading}", fontSize = 10.sp)
                }
            }
        }
        Spacer(modifier = Modifier.height(8.dp))

        // Devam Et Butonu (Orijinal kodunuzdaki gibi, sadece koÅŸul dÃ¼zeltildi)
        Button(
            onClick = {
                // Navigation state'i gÃ¼ncelle ve devam et
                viewModel.processUrunBarcode(barcodeInput)
                viewModel.navigateToNextStep()
                onNavigateToUrunDetail()
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(56.dp),
            //enabled = urunBilgileri.tasnifNo.isNotEmpty() && isUrunBarcodeScanned && !isLoading, // Orijinal mantÄ±ÄŸÄ±nÄ±z
            colors = ButtonDefaults.buttonColors(
                containerColor = MaterialTheme.colorScheme.primary,
                disabledContainerColor = Color.Gray
            )
        ) {
            Text(
                text = "DEVAM ET",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold
            )
            Spacer(modifier = Modifier.width(8.dp))
            Icon(
                imageVector = Icons.Default.ArrowForward,
                contentDescription = null,
                modifier = Modifier.size(20.dp)
            )
        }

        // **YENÄ°: Force Enable Butonu (Debug iÃ§in)**
        if (urunBilgileri.tasnifNo.isNotEmpty() && !isUrunBarcodeScanned) {
            Spacer(modifier = Modifier.height(8.dp))
            TextButton(
                onClick = {
                    // Force olarak isUrunBarcodeScanned'i true yap
                    Toast.makeText(context, "Force enabling - Bu sadece debug iÃ§in!", Toast.LENGTH_SHORT).show()

                    // EÄŸer ViewModel'de public bir setter varsa kullan, yoksa alternatif Ã§Ã¶zÃ¼m
                    // viewModel.forceEnableUrunBarcode() // Bu metodu ViewModel'e eklemelisiniz

                    viewModel.navigateToNextStep()
                    onNavigateToUrunDetail()
                },
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(
                    text = "ðŸ”§ DEBUG: FORCE ENABLE & CONTINUE",
                    color = Color.Red,
                    fontSize = 12.sp,
                    fontWeight = FontWeight.Bold
                )
            }
        }
    }

    // Loading indicator
    if (isLoading) {
        Box(
            modifier = Modifier.fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            CircularProgressIndicator()
        }
    }

    // Error handling
    errorMessage?.let { message ->
        AlertDialog(
            onDismissRequest = { viewModel.clearError() },
            title = { Text("Hata") },
            text = { Text(message) },
            confirmButton = {
                TextButton(onClick = { viewModel.clearError() }) {
                    Text("Tamam")
                }
            }
        )
    }
}

/**
 * ÃœrÃ¼n format kontrolÃ¼
 */
private fun isValidUrunFormat(urunNo: String): Boolean {
    return urunNo.startsWith("U") && urunNo.length == 12
}